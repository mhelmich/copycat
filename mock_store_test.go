// Code generated by mockery v1.0.0. DO NOT EDIT.
package copycat

import mock "github.com/stretchr/testify/mock"
import raftpb "github.com/coreos/etcd/raft/raftpb"

// mockStore is an autogenerated mock type for the store type
type mockStore struct {
	mock.Mock
}

// close provides a mock function with given fields:
func (_m *mockStore) close() {
	_m.Called()
}

// dropLogEntriesBeforeIndex provides a mock function with given fields: index
func (_m *mockStore) dropLogEntriesBeforeIndex(index uint64) error {
	ret := _m.Called(index)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// dropOldSnapshots provides a mock function with given fields: numberOfSnapshotsToKeep
func (_m *mockStore) dropOldSnapshots(numberOfSnapshotsToKeep int) error {
	ret := _m.Called(numberOfSnapshotsToKeep)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(numberOfSnapshotsToKeep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// saveConfigState provides a mock function with given fields: confState
func (_m *mockStore) saveConfigState(confState raftpb.ConfState) error {
	ret := _m.Called(confState)

	var r0 error
	if rf, ok := ret.Get(0).(func(raftpb.ConfState) error); ok {
		r0 = rf(confState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// saveEntriesAndState provides a mock function with given fields: entries, hardState
func (_m *mockStore) saveEntriesAndState(entries []raftpb.Entry, hardState raftpb.HardState) error {
	ret := _m.Called(entries, hardState)

	var r0 error
	if rf, ok := ret.Get(0).(func([]raftpb.Entry, raftpb.HardState) error); ok {
		r0 = rf(entries, hardState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// saveSnap provides a mock function with given fields: snap
func (_m *mockStore) saveSnap(snap raftpb.Snapshot) error {
	ret := _m.Called(snap)

	var r0 error
	if rf, ok := ret.Get(0).(func(raftpb.Snapshot) error); ok {
		r0 = rf(snap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Entries provides a mock function with given fields: lo, hi, maxSize
func (_m *mockStore) Entries(lo uint64, hi uint64, maxSize uint64) ([]raftpb.Entry, error) {
	ret := _m.Called(lo, hi, maxSize)

	var r0 []raftpb.Entry
	if rf, ok := ret.Get(0).(func(uint64, uint64, uint64) []raftpb.Entry); ok {
		r0 = rf(lo, hi, maxSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]raftpb.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64, uint64) error); ok {
		r1 = rf(lo, hi, maxSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstIndex provides a mock function with given fields:
func (_m *mockStore) FirstIndex() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitialState provides a mock function with given fields:
func (_m *mockStore) InitialState() (raftpb.HardState, raftpb.ConfState, error) {
	ret := _m.Called()

	var r0 raftpb.HardState
	if rf, ok := ret.Get(0).(func() raftpb.HardState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raftpb.HardState)
	}

	var r1 raftpb.ConfState
	if rf, ok := ret.Get(1).(func() raftpb.ConfState); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(raftpb.ConfState)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LastIndex provides a mock function with given fields:
func (_m *mockStore) LastIndex() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Snapshot provides a mock function with given fields:
func (_m *mockStore) Snapshot() (raftpb.Snapshot, error) {
	ret := _m.Called()

	var r0 raftpb.Snapshot
	if rf, ok := ret.Get(0).(func() raftpb.Snapshot); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raftpb.Snapshot)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Term provides a mock function with given fields: i
func (_m *mockStore) Term(i uint64) (uint64, error) {
	ret := _m.Called(i)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
