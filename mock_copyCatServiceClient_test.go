// Code generated by mockery v1.0.0. DO NOT EDIT.
package copycat

import (
	context "context"

	grpc "google.golang.org/grpc"

	"github.com/mhelmich/copycat/pb"
	mock "github.com/stretchr/testify/mock"
)

// mockCopyCatServiceClient is an autogenerated mock type for the CopyCatServiceClient type
type mockCopyCatServiceClient struct {
	mock.Mock
}

// AddRaftToRaftGroup provides a mock function with given fields: ctx, in, opts
func (_m *mockCopyCatServiceClient) AddRaftToRaftGroup(ctx context.Context, in *pb.AddRaftRequest, opts ...grpc.CallOption) (*pb.AddRaftResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AddRaftResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddRaftRequest, ...grpc.CallOption) *pb.AddRaftResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddRaftResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.AddRaftRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRaft provides a mock function with given fields: ctx, in, opts
func (_m *mockCopyCatServiceClient) StartRaft(ctx context.Context, in *pb.StartRaftRequest, opts ...grpc.CallOption) (*pb.StartRaftResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StartRaftResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StartRaftRequest, ...grpc.CallOption) *pb.StartRaftResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StartRaftResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StartRaftRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopRaft provides a mock function with given fields: ctx, in, opts
func (_m *mockCopyCatServiceClient) StopRaft(ctx context.Context, in *pb.StopRaftRequest, opts ...grpc.CallOption) (*pb.StopRaftResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StopRaftResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StopRaftRequest, ...grpc.CallOption) *pb.StopRaftResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StopRaftResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StopRaftRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
