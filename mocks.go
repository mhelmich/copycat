/*
 * Copyright 2018 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package copycat

import (
	"context"

	"github.com/coreos/etcd/raft"
	raftpb "github.com/coreos/etcd/raft/raftpb"
	mock "github.com/stretchr/testify/mock"
)

type mockRaftBackend struct {
	mock.Mock
}

func (rb *mockRaftBackend) step(ctx context.Context, msg raftpb.Message) error {
	args := rb.Called(ctx, msg)
	return args.Error(0)
}

func (rb *mockRaftBackend) stop() {
	rb.Called()
}

type mockTransportMembership struct {
	mock.Mock
}

func (mtm *mockTransportMembership) addDataStructureToRaftIdMapping(dataStructureId uint64, raftId uint64) error {
	args := mtm.Called(dataStructureId, raftId)
	return args.Error(0)
}

func (mtm *mockTransportMembership) getAddressForRaftId(raftId uint64) string {
	args := mtm.Called(raftId)
	return args.String(0)
}

func (mtm *mockTransportMembership) getAddressesForDataStructureId(dataStructureId uint64) []string {
	args := mtm.Called(dataStructureId)
	o := args.Get(0)
	if o != nil {
		return o.([]string)
	}

	return nil
}

// Thanks mockery! But I'll take it from here.
// mockRaftTransport is an autogenerated mock type for the mockRaftTransport type
type mockRaftTransport struct {
	mock.Mock
}

// sendMessages provides a mock function with given fields: msgs
func (_m *mockRaftTransport) sendMessages(msgs []raftpb.Message) {
	_m.Called(msgs)
}

// Thanks mockery! But I'll take it from here.
// mockRaftNode is an autogenerated mock type for the mockRaftNode type
type mockRaftNode struct {
	mock.Mock
}

// Advance provides a mock function with given fields:
func (_m *mockRaftNode) Advance() {
	_m.Called()
}

// ApplyConfChange provides a mock function with given fields: cc
func (_m *mockRaftNode) ApplyConfChange(cc raftpb.ConfChange) *raftpb.ConfState {
	ret := _m.Called(cc)

	var r0 *raftpb.ConfState
	if rf, ok := ret.Get(0).(func(raftpb.ConfChange) *raftpb.ConfState); ok {
		r0 = rf(cc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*raftpb.ConfState)
		}
	}

	return r0
}

// Campaign provides a mock function with given fields: ctx
func (_m *mockRaftNode) Campaign(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Propose provides a mock function with given fields: ctx, data
func (_m *mockRaftNode) Propose(ctx context.Context, data []byte) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProposeConfChange provides a mock function with given fields: ctx, cc
func (_m *mockRaftNode) ProposeConfChange(ctx context.Context, cc raftpb.ConfChange) error {
	ret := _m.Called(ctx, cc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, raftpb.ConfChange) error); ok {
		r0 = rf(ctx, cc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadIndex provides a mock function with given fields: ctx, rctx
func (_m *mockRaftNode) ReadIndex(ctx context.Context, rctx []byte) error {
	ret := _m.Called(ctx, rctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, rctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *mockRaftNode) Ready() <-chan raft.Ready {
	ret := _m.Called()

	var r0 <-chan raft.Ready
	if rf, ok := ret.Get(0).(func() <-chan raft.Ready); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan raft.Ready)
		}
	}

	return r0
}

// ReportSnapshot provides a mock function with given fields: id, status
func (_m *mockRaftNode) ReportSnapshot(id uint64, status raft.SnapshotStatus) {
	_m.Called(id, status)
}

// ReportUnreachable provides a mock function with given fields: id
func (_m *mockRaftNode) ReportUnreachable(id uint64) {
	_m.Called(id)
}

// Status provides a mock function with given fields:
func (_m *mockRaftNode) Status() raft.Status {
	ret := _m.Called()

	var r0 raft.Status
	if rf, ok := ret.Get(0).(func() raft.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raft.Status)
	}

	return r0
}

// Step provides a mock function with given fields: ctx, msg
func (_m *mockRaftNode) Step(ctx context.Context, msg raftpb.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, raftpb.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *mockRaftNode) Stop() {
	_m.Called()
}

// Tick provides a mock function with given fields:
func (_m *mockRaftNode) Tick() {
	_m.Called()
}

// TransferLeadership provides a mock function with given fields: ctx, lead, transferee
func (_m *mockRaftNode) TransferLeadership(ctx context.Context, lead uint64, transferee uint64) {
	_m.Called(ctx, lead, transferee)
}
