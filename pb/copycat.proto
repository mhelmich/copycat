/*
 * Copyright 2018 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pb;

// raft proto also pulls this in
// make sure we import it the same way as raft does
import "gogoproto/gogo.proto";
import "github.com/coreos/etcd/raft/raftpb/raft.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR TESTS

message TestCat {
  map<string, string> m = 1;
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR GOSSIP QUERIES

enum GossipQueryNames {
  RaftIdQuery = 0;
  DataStructureIdQuery = 1;
}

message RaftIdQueryRequest {
  uint64 RaftId = 1;
}

message RaftIdQueryResponse {
  uint64 RaftId = 1;
  string Address = 2;
}

message DataStructureIdRequest {
  uint64 DataStructureId = 1;
}

message DataStructureIdResponse {
  uint64 DataStructureId = 1;
  uint64 RaftId = 2;
  string Address = 3;
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR CLUSTER METADATA

message Peer {
  uint64 Id = 1;
  string RaftAddress = 2;
}

message HostedItems {
  map<uint64,uint64> DataStructureToRaftMapping = 1;
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR THE DATA STRUCTURE SERVICE
// UNUSED SO FAR...

service DataStructureService {
  // A client keeps sending operations into this stream.
  // CopyCat will consume this stream and try to achieve consensus.
  rpc Propose(stream ProposeReq) returns (ProposeResp) {}
  // All changes that CopyCat accepted and committed will be replayed via this stream.
  // This stream will contain all committed operations that have been sent to the propose stream.
  rpc Commit(CommitReq) returns (stream CommitResp) {}
  // If CopyCay runs into an error when trying to commit a change, this stream will contain an error.
  rpc Error(ErrorReq) returns (stream ErrorResp) {}
  // Then the commit stream hints that a new snapshot is available, this endpoint will provide it to you.
  rpc ConsumeSnapshot(ConsumeSnapshotReq) returns (ConsumeSnapshotResp) {}
  // This endpoint will be used to provide a consistent snapshot of data to CopyCat.
  // In regular intervals CopyCat will ask for a consistent snapshot of your data structure.
  // Clients are required to send a request to this endpoint as soon as they start interacting
  // with a data sturcture. After they get a response from this endpoint, they need to reply
  // to the response with another message containing a snapshot of the data structure.
  // CopyCat will block until it has received the snapshot.
  rpc ProvideSnapshot(stream ProvideSnapshotReq) returns (stream ProvideSnapshotResp) {}
}

message ProposeReq {
  uint64 DataStructureId = 1;
  bytes Data = 2;
}

message ProposeResp {
  string ForwardAddress = 1;
}

message CommitReq {
  uint64 DataStructureId = 1;
}

message CommitResp {
  bytes Data = 1;
}

message ErrorReq {
  uint64 DataStructureId = 1;
}

message ErrorResp {
  string Error = 1;
}

message ConsumeSnapshotReq {
  uint64 DataStructureId = 1;
}

message ConsumeSnapshotResp {
  bytes Data = 1;
}

message ProvideSnapshotReq {
  uint64 DataStructureId = 1;
  bytes Data = 2;
}

message ProvideSnapshotResp {
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR THE RAFT TRANSPORT

enum TransportError {
  NoError = 0;
}

service RaftTransportService {
  rpc Send(stream SendReq) returns (stream SendResp) {}
}

message SendReq {
  raftpb.Message Message = 1;
}

message SendResp {
  TransportError Error = 1;
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR THE COPYCAT SERVICE

service CopyCatService {
  rpc NewDataStructure(NewDataStructureRequest) returns (NewDataStructureResponse) {}
  rpc StartRaft(StartRaftRequest) returns (StartRaftResponse) {}
  rpc StopRaft(StopRaftRequest) returns (StopRaftResponse) {}
}

message NewDataStructureRequest {
}

message NewDataStructureResponse {
  uint64 DataStructureId = 1;
}

message StartRaftRequest {
}

message StartRaftResponse {
  uint64 RaftId = 1;
  string RaftAddress = 2;
}

message StopRaftRequest {
  uint64 RaftId = 1;
}

message StopRaftResponse {
}
